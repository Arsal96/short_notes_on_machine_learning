<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>postgresql - Machine Learning Tutorials</title>
    <link>https://chrisalbon.com/postgresql/index.xml</link>
    <description></description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Jun 2018 11:53:49 -0700</lastBuildDate>
    
        <atom:link href="https://chrisalbon.com/postgresql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create PostgreSQL Database With Python</title>
      <link>https://chrisalbon.com/postgresql/basics/create_postgresql_database_with_python/</link>
      <pubDate>Mon, 18 Jun 2018 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/create_postgresql_database_with_python/</guid>
      <description>Preliminaries # Load libraries from sqlalchemy import create_engine from sqlalchemy_utils import create_database, database_exists, drop_database # Create PostgreSQL connection engine = create_engine(&amp;#34;postgres://localhost/notes_db&amp;#34;) # Load sql_magic so we can write SQL in Jupyter Notebooks %load_ext sql_magic # Setup SQL connection to the postgreSQL engine we created %config SQL.conn_name = &amp;#39;engine&amp;#39; Create Database # If a PostgreSQL database with this name exists if database_exists(engine.url): # Delete PostgreSQL database  drop_database(engine.url) # Create empty PostgreSQL database create_database(engine.</description>
    </item>
    
    <item>
      <title>Add Column</title>
      <link>https://chrisalbon.com/postgresql/add_delete_change/add_column/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/add_delete_change/add_column/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Add Column -- Alter the table called adventurers ALTERTABLEadventurers-- Add a column called armor that is a 255 -- character string field with the default value of null ADDCOLUMNarmorvarchar(255)NULL View Table -- Retrieve all rows SELECT*FROMadventurers nameageraceweaponarmor Fjoak Doom-Wife28HumanAxeNULL Alooneric Cortte29ElfBowNULL Piperel Ramsay35ElfSwordNULL Casimir Yardley14ElfMagicNULL</description>
    </item>
    
    <item>
      <title>Adding Or Substracting Time</title>
      <link>https://chrisalbon.com/postgresql/dates/adding_or_substracting_time/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/dates/adding_or_substracting_time/</guid>
      <description>Create Table -- Create table called dead_adventurers CREATETABLEdead_adventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255),-- date variable dieddate) Insert Rows -- Insert into the table dead_adventurers INSERTINTOdead_adventurers(name,age,race,weapon,died)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;,&amp;#39;09-Nov-2017&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;,&amp;#39;10-JAN-2017&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;,&amp;#39;12-APR-2016&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;,&amp;#39;06-MAY-2017&amp;#39;) Create New Column Three Days Later -- Create a column called three_days_laters that takes the value -- of died and adds three days to it SELECTdied+INTERVAL&amp;#39;3 day&amp;#39;ASthree_days_later-- From adventurers table FROMdead_adventurers three_days_later 2017-11-12 00:00:00.000000 2017-01-13 00:00:00.</description>
    </item>
    
    <item>
      <title>All Unique Values In Two Tables</title>
      <link>https://chrisalbon.com/postgresql/merging_and_joining/all_unique_values_in_two_tables/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/merging_and_joining/all_unique_values_in_two_tables/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATETABLEelves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Create Table Of Dwarves -- Create table called dwarves CREATETABLEdwarves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows Into Elf Table INSERTINTOelves(name,age,race,weapon)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERTINTOdwarves(name,age,race,weapon)VALUES(&amp;#39;Kalog&amp;#39;,23,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Dranar&amp;#39;,145,&amp;#39;Dwarf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Bratar&amp;#39;,12,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Dragga&amp;#39;,23,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;) Find The Combined Unique Values In Two Tables -- Retrieve all weapons from elves SELECTweaponFROMelves-- Combine unique values with.</description>
    </item>
    
    <item>
      <title>Apply Operation To Column</title>
      <link>https://chrisalbon.com/postgresql/basics/apply_operation_to_column/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/apply_operation_to_column/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;) Apply Operation To Column -- Update the age column, multiplying all age values by 10 UPDATEadventurersSETage=age*10 Apply Operation To Column With Conditions -- Update the name column where the race column is &amp;#39;Elf&amp;#39; UPDATEadventurersSETname=&amp;#39;Some Elf&amp;#39;WHERErace=&amp;#39;Elf&amp;#39; View Table -- Retrieve data SELECT*FROMadventurers nameagerace Fjoak Doom-Wife280Human Some Elf290Elf Some Elf350Elf Some Elf140Elf</description>
    </item>
    
    <item>
      <title>Calculate Max, Min, Or Average Of Column</title>
      <link>https://chrisalbon.com/postgresql/numeric/max_min_and_average_of_column/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/numeric/max_min_and_average_of_column/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Calculate Max -- Return maximum value of of age in adventurers SELECTMAX(age)FROMadventurers max 35 Calculate Min -- Return minimum value of of age in adventurers SELECTMIN(age)FROMadventurers min 14 Calculate Average -- Return average value of of age in adventurers SELECTAVG(age)FROMadventurers avg 26.</description>
    </item>
    
    <item>
      <title>Calculate Requests Sent</title>
      <link>https://chrisalbon.com/postgresql/interview_questions/calculate_requests_sent/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/interview_questions/calculate_requests_sent/</guid>
      <description>Question You are given a table containing a country code, the number of requests attempted, and the percentage of those requests that failed to sent. Calculate:
 The total number of requests attempted by country. The total number of failed requests attempted by country.  Answer Create Table -- Drop table if exists DROPTABLEIFEXISTSglobal_usage-- Create table called documents CREATETABLEglobal_usage(-- string variable countryvarchar(255),-- integer variable requests_attemptedint,-- float variable percent_requests_failedfloat); Insert Data Into Table -- Insert data into the table INSERTINTOglobal_usage(country,requests_attempted,percent_requests_failed)VALUES(&amp;#39;US&amp;#39;,100,.</description>
    </item>
    
    <item>
      <title>Calculate Running Total</title>
      <link>https://chrisalbon.com/postgresql/numeric/calculate_running_total/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/numeric/calculate_running_total/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- integer variable idint,-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(id,name,age,race,weapon)VALUES(1,&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(2,&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(3,&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(4,&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Create Running Total -- Get name, age, and... SELECTcopy1.name,copy1.age,-- a sum of age from a copy of adventurers table called copy2 -- Where the id of the copy2 is less than or equal to the id of copy1 -- and call it running_total (SELECTsum(copy2.</description>
    </item>
    
    <item>
      <title>Calculate Sum Of Column</title>
      <link>https://chrisalbon.com/postgresql/numeric/calculate_sum_of_column/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/numeric/calculate_sum_of_column/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Calculate Sum -- Return total value of of age in adventurers SELECTSUM(age)FROMadventurers sum 106</description>
    </item>
    
    <item>
      <title>Calculate Time Duration</title>
      <link>https://chrisalbon.com/postgresql/dates/calculate_time_duration/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/dates/calculate_time_duration/</guid>
      <description>Create Table -- Create table called dead_adventurers CREATETABLEdead_adventurers(-- string variable namevarchar(255),-- string variable racevarchar(255),-- string variable weaponvarchar(255),-- date variable started_adventuredate,-- date variable dieddate) Insert Rows -- Insert into the table dead_adventurers INSERTINTOdead_adventurers(name,race,weapon,started_adventure,died)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;,&amp;#39;09-JAN-2017&amp;#39;,&amp;#39;10-Nov-2017&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;,&amp;#39;10-JAN-2017&amp;#39;,&amp;#39;11-JAN-2017&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;,&amp;#39;11-JAN-2017&amp;#39;,&amp;#39;12-APR-2017&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;,&amp;#39;23-JAN-2017&amp;#39;,&amp;#39;06-MAY-2017&amp;#39;) Calculate Duration Between Two Date Values -- Get all the columns, and add a new column called days_on_adventure -- that is the number of days between the start of the adventurer and when they died SELECT*,died-started_adventureASdays_on_adventureFROMdead_adventurers nameraceweaponstarted_adventuredieddays_on_adventure Fjoak Doom-WifeHumanAxe2017-01-092017-11-10305 Alooneric CortteElfBow2017-01-102017-01-111 Piperel RamsayElfSword2017-01-112017-04-1291 Casimir YardleyElfMagic2017-01-232017-05-06103 </description>
    </item>
    
    <item>
      <title>Cartesian Product Of Tables</title>
      <link>https://chrisalbon.com/postgresql/merging_and_joining/cartesian_product/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/merging_and_joining/cartesian_product/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255)) Create Table Of Adventurer&amp;rsquo;s Equipment -- Create table called equipment CREATETABLEequipment(-- string variable namevarchar(255),-- string variable clothesvarchar(255),-- string variable weaponvarchar(255)) Insert Rows Into Adventurers Table INSERTINTOadventurers(name,age,race)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Dwarf&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Dwarf&amp;#39;) Insert Rows Into Equipment Table INSERTINTOequipment(name,clothes,weapon)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,&amp;#39;Leather Armor&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,&amp;#39;Robe&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Tasar Keynelis&amp;#39;,&amp;#39;Tunic&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Sataleeti Iarroris&amp;#39;,&amp;#39;Chainmail&amp;#39;,&amp;#39;Axe&amp;#39;) Cartestian Product Of Tables -- Return the name of people from the adventurers table, age, race, clothes, and weapon SELECTadventurers.</description>
    </item>
    
    <item>
      <title>Change Values</title>
      <link>https://chrisalbon.com/postgresql/add_delete_change/change_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/add_delete_change/change_values/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATETABLEelves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable alivevarchar(255)) Insert Rows Into Elf Table INSERTINTOelves(name,age,race,alive)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;) Update Row Values -- Update the elves table UPDATEelves-- To set age to the current age plus 1 SETage=age+1 View Elves Table -- Retrieve all rows from the view Elf SELECT*FROMelves nameageracealive Dallar Woodfoot26ElfYes Cordin Garner30ElfYes Keat Knigh25ElfYes Colbat Nalor125ElfYes</description>
    </item>
    
    <item>
      <title>Compare Values To Subquery</title>
      <link>https://chrisalbon.com/postgresql/basics/compare_values_to_subquery/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/compare_values_to_subquery/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATETABLEelves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Create Table Of Dwarves -- Create table called dwarves CREATETABLEdwarves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows Into Elf Table INSERTINTOelves(name,age,race,weapon)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERTINTOdwarves(name,age,race,weapon)VALUES(&amp;#39;Kalog&amp;#39;,23,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Dranar&amp;#39;,145,&amp;#39;Dwarf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Bratar&amp;#39;,12,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Dragga&amp;#39;,23,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;) Check If Each Elf Is Older Than Any Of The Dwarves -- Retrieve All The Elves SELECT*FROMelves-- Where their age is greater than at least one WHEREage&amp;gt;ANY(-- Of all the Dwarves SELECTageFROMdwarves) nameageraceweapon Dallar Woodfoot25ElfBow Cordin Garner29ElfBow Keat Knigh24ElfSword Colbat Nalor124ElfMagic Check If Each Elf Is Older Than All Of The Dwarves -- Retrieve All The Elves SELECT*FROMelves-- Where their age is greater than all WHEREage&amp;gt;ALL(-- Of all the Dwarves SELECTageFROMdwarves) </description>
    </item>
    
    <item>
      <title>Concatenate Multiple Table</title>
      <link>https://chrisalbon.com/postgresql/merging_and_joining/concatenate_multiple_tables/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/merging_and_joining/concatenate_multiple_tables/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATETABLEelves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Create Table Of Dwarves -- Create table called dwarves CREATETABLEdwarves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Create Table Of Orcs -- Create table called orcs CREATETABLEorcs(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows Into Elf Table INSERTINTOelves(name,age,race,weapon)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERTINTOdwarves(name,age,race,weapon)VALUES(&amp;#39;Kalog&amp;#39;,23,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Dranar&amp;#39;,145,&amp;#39;Dwarf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Bratar&amp;#39;,12,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Dragga&amp;#39;,23,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;) Insert Rows Into Orc Table INSERTINTOorcs(name,age,race,weapon)VALUES(&amp;#39;Wokganit&amp;#39;,23,&amp;#39;Orc&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Wudugog&amp;#39;,145,&amp;#39;Orc&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Wegigoth&amp;#39;,12,&amp;#39;Orc&amp;#39;,&amp;#39;Magic&amp;#39;),(&amp;#39;Wulgha&amp;#39;,23,&amp;#39;Orc&amp;#39;,&amp;#39;Axe&amp;#39;) Concatenate All Tables -- All rows from elf table SELECT*FROMelves-- Concatenate with.</description>
    </item>
    
    <item>
      <title>Concatenate Values</title>
      <link>https://chrisalbon.com/postgresql/text/concatenate_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/text/concatenate_values/</guid>
      <description>Note: This code works in PostgreSQL databases, but might not work in other SQL database systems (e.g. MySQL).
Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Retrieve Two Columns -- Retrieve name and age values and concatenate together as a sentence SELECTname||&amp;#39; is &amp;#39;||age||&amp;#39; years old.</description>
    </item>
    
    <item>
      <title>Convert Floats To Integers</title>
      <link>https://chrisalbon.com/postgresql/numeric/convert_floats_to_integers/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/numeric/convert_floats_to_integers/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Calculate Average -- Return average value of of age in adventurers SELECTAVG(age)FROMadventurers avg 26.5 Calculate Average As Integer -- Return average integer value of age in adventurers SELECTCAST(AVG(age)ASINTEGER)FROMadventurers avg 27</description>
    </item>
    
    <item>
      <title>Copy Rows From One Table To Another</title>
      <link>https://chrisalbon.com/postgresql/basics/copy_rows_from_one_table_to_another/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/copy_rows_from_one_table_to_another/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255)) Create Table Of Villains -- Create table called equipment CREATETABLEvillains(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255)) Insert Row Into Adventurers -- Insert into the table adventurers INSERTINTOadventurers(name,age,race)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;) View Adventurers Table -- Retrieve all rows SELECT*FROMadventurers nameagerace Fjoak Doom-Wife28Human Copy Rows From Adventurers Table To Villains Table -- Insert into the villains table INSERTINTOvillains(-- All rows from adventurers SELECT*FROMadventurers) View Villains Table -- Retrieve all rows SELECT*FROMvillains nameagerace Fjoak Doom-Wife28Human</description>
    </item>
    
    <item>
      <title>Copy Table Structure</title>
      <link>https://chrisalbon.com/postgresql/tables/copy_table_structure/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/tables/copy_table_structure/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Create New Table Using Existing Table&amp;rsquo;s Structure -- Create table called adventurers_copy using the same columns as... CREATETABLEadventurers_copyAS(-- The adventurers table SELECT*FROMadventurers) </description>
    </item>
    
    <item>
      <title>Count Rows</title>
      <link>https://chrisalbon.com/postgresql/basics/count_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/count_rows/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Count Rows -- Count rows in adventurers SELECTCOUNT(*)FROMadventurers count 4</description>
    </item>
    
    <item>
      <title>Count Unique Values</title>
      <link>https://chrisalbon.com/postgresql/basics/count_unique_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/count_unique_values/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Count Unique Values In Race -- Count the number of unique values in the race column SELECTCOUNT(DISTINCTrace)FROMadventurers count 2</description>
    </item>
    
    <item>
      <title>Create Column Aliases</title>
      <link>https://chrisalbon.com/postgresql/add_delete_change/create_column_aliases/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/add_delete_change/create_column_aliases/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Retrieve Two Columns -- Retrieve name and weapon column, renamed full_name and primary_weapon SELECTnameasfull_name,weaponasprimary_weaponFROMadventurers full_nameprimary_weapon Fjoak Doom-WifeAxe Alooneric CortteBow Piperel RamsaySword Casimir YardleyMagic</description>
    </item>
    
    <item>
      <title>Create Column Conditional On Another Column</title>
      <link>https://chrisalbon.com/postgresql/add_delete_change/create_column_condition_on_another_column/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/add_delete_change/create_column_condition_on_another_column/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Create An If Else Statement There are a number of ways to do if-else in SQL, my prefered way is the CASE statement.
-- Retrieve all rows SELECT*,-- The case when race = elf, return &amp;#34;Elvish&amp;#34; CASEWHENrace=&amp;#39;Elf&amp;#39;THEN&amp;#39;Elvish&amp;#39;-- When race = human, return &amp;#34;Human&amp;#34; WHENrace=&amp;#39;Human&amp;#39;THEN&amp;#39;Human&amp;#39;-- Call this column &amp;#34;race&amp;#34; ENDASrace-- Do this from the adventurers table FROMadventurers nameageraceweaponrace Fjoak Doom-Wife28HumanAxeHuman Alooneric Cortte29ElfBowElvish Piperel Ramsay35ElfSwordElvish Casimir Yardley14ElfMagicElvish</description>
    </item>
    
    <item>
      <title>Create Column Index</title>
      <link>https://chrisalbon.com/postgresql/basics/create_column_index/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/create_column_index/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATETABLEelves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable alivevarchar(255)) Insert Rows Into Elf Table INSERTINTOelves(name,age,race,alive)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;) Create Index -- Index the names column in the elves table CREATEINDEXONelves(name) </description>
    </item>
    
    <item>
      <title>Create Column Of Values</title>
      <link>https://chrisalbon.com/postgresql/add_delete_change/create_column_of_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/add_delete_change/create_column_of_values/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Create Column Of Values -- Get all rows and add a column called training where all values are &amp;#39;elite&amp;#39; SELECT*,&amp;#39;elite&amp;#39;astrainingFROMadventurers nameageraceweapontraining Fjoak Doom-Wife28HumanAxeelite Alooneric Cortte29ElfBowelite Piperel Ramsay35ElfSwordelite Casimir Yardley14ElfMagicelite</description>
    </item>
    
    <item>
      <title>Create Primary Key</title>
      <link>https://chrisalbon.com/postgresql/add_delete_change/create_primary_key/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/add_delete_change/create_primary_key/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- integer variable adventurer_idINT,-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255),PRIMARYKEY(adventurer_id)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(adventurer_id,name,age,race,weapon)VALUES(1,&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(2,&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Human&amp;#39;,&amp;#39;Bow&amp;#39;),(3,&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(4,&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;) View Table -- Retrieve all rows SELECT*FROMadventurers adventurer_idnameageraceweapon 1Fjoak Doom-Wife28HumanAxe 2Alooneric Cortte29HumanBow 3Piperel Ramsay35ElfBow 4Casimir Yardley14ElfBow</description>
    </item>
    
    <item>
      <title>Create Subquery</title>
      <link>https://chrisalbon.com/postgresql/basics/create_subquery/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/create_subquery/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Create Subquery -- Retrieve all the rows in adventurers SELECT*FROMadventurers-- Where the name of the adventurer is in WHEREnameIN-- A subquery that will (-- Select all the names in adventurers SELECTnameFROMadventurers-- Where race is elf WHERErace=&amp;#39;Elf&amp;#39;) nameagerace Alooneric Cortte29Elf Piperel Ramsay35Elf Casimir Yardley14Elf</description>
    </item>
    
    <item>
      <title>Create Table</title>
      <link>https://chrisalbon.com/postgresql/tables/create_table/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/tables/create_table/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) </description>
    </item>
    
    <item>
      <title>Create Table With Default Values</title>
      <link>https://chrisalbon.com/postgresql/tables/create_table_with_default_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/tables/create_table_with_default_values/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable with default value of &amp;#39;no weapon&amp;#39; weaponvarchar(255)DEFAULT&amp;#39;no weapon&amp;#39;) Insert Row -- Insert rows into the table adventurers -- Notice we don&amp;#39;t provide value for weapon column INSERTINTOadventurers(name,age,race)VALUES(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;) Retrieve Rows -- Retrieve all rows from table SELECT*FROMadventurers nameageraceweapon Piperel Ramsay35Elfno weapon Casimir Yardley14Elfno weapon</description>
    </item>
    
    <item>
      <title>Create Table With UUIDs</title>
      <link>https://chrisalbon.com/postgresql/tables/create_table_with_uuids/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/tables/create_table_with_uuids/</guid>
      <description>Install UUID Extension -- Install uuid extension CREATEEXTENSIONIFNOTEXISTS&amp;#34;uuid-ossp&amp;#34; Create Table -- Create table called adventurers CREATETABLEadventurers(-- uuid variable adventurer_iduuidDEFAULTuuid_generate_v4(),-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255),-- Assign adventurer_id as primary key PRIMARYKEY(adventurer_id)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Human&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;) View Table -- Retrieve all rows in table SELECT*FROMadventurers adventurer_idnameageraceweapon 61bf9084-2fcc-40dd-bbec-08de205e7877Fjoak Doom-Wife28HumanAxe 495c81ca-a49d-4848-84bc-01bfa27916ccAlooneric Cortte29HumanBow 1533f42e-e64b-4aa2-8432-926defe3d248Piperel Ramsay35ElfBow 090420af-372c-43b8-9eda-763a76eb692fCasimir Yardley14ElfBow</description>
    </item>
    
    <item>
      <title>Create Temporary Table</title>
      <link>https://chrisalbon.com/postgresql/tables/create_temporary_table/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/tables/create_temporary_table/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Human&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;) Create Temporary Table From Original Table -- Create a temporary table called adventurers_temp that... CREATETEMPTABLEadventurers_tempAS-- Contains all rows and columns from adventurers SELECT*FROMadventurers View Temporary Table -- Retrieve all rows and columns from temporary table SELECT*FROMadventurers_temp nameageraceweapon Fjoak Doom-Wife28HumanAxe Alooneric Cortte29HumanBow Piperel Ramsay35ElfBow Casimir Yardley14ElfBow</description>
    </item>
    
    <item>
      <title>Create View</title>
      <link>https://chrisalbon.com/postgresql/basics/create_view/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/create_view/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Human&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;) Create View -- Create view called elves containing CREATEVIEWelvesAS(-- Select all rows from adventurers table SELECT*FROMadventurers-- Where the race is elf WHERErace=&amp;#39;Elf&amp;#39;) Retrieve View -- Retrieve all rows from the view Elf SELECT*FROMelves nameageraceweapon Piperel Ramsay35ElfBow Casimir Yardley14ElfBow</description>
    </item>
    
    <item>
      <title>Delete All Rows</title>
      <link>https://chrisalbon.com/postgresql/add_delete_change/delete_all_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/add_delete_change/delete_all_rows/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Human&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;) View Table -- Retrieve all rows SELECT*FROMadventurers nameageraceweapon Fjoak Doom-Wife28HumanAxe Alooneric Cortte29HumanBow Piperel Ramsay35ElfBow Casimir Yardley14ElfBow Delete All Rows -- Delete all rows DELETEFROMadventurers View Table -- Retrieve all rows SELECT*FROMadventurers </description>
    </item>
    
    <item>
      <title>Delete Duplicates</title>
      <link>https://chrisalbon.com/postgresql/add_delete_change/delete_duplicates/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/add_delete_change/delete_duplicates/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATETABLEelves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable alivevarchar(255)) Insert Rows Into Elf Table INSERTINTOelves(name,age,race,alive)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;) View Elves Table -- Retrieve all rows from the view Elf SELECT*FROMelves nameageracealive Dallar Woodfoot25ElfYes Cordin Garner29ElfYes Keat Knigh24ElfYes Keat Knigh24ElfYes Keat Knigh24ElfYes Keat Knigh24ElfYes Colbat Nalor124ElfYes Drop Duplicates Note: Normally we would use a unique identify column (e.</description>
    </item>
    
    <item>
      <title>Delete Primary Key</title>
      <link>https://chrisalbon.com/postgresql/add_delete_change/delete_primary_key/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/add_delete_change/delete_primary_key/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- integer variable adventurer_idINT,-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255),PRIMARYKEY(adventurer_id)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(adventurer_id,name,age,race,weapon)VALUES(1,&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(2,&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Human&amp;#39;,&amp;#39;Bow&amp;#39;),(3,&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(4,&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;) View Table -- Retrieve all rows SELECT*FROMadventurers adventurer_idnameageraceweapon 1Fjoak Doom-Wife28HumanAxe 2Alooneric Cortte29HumanBow 3Piperel Ramsay35ElfBow 4Casimir Yardley14ElfBow Delete Primary Key -- Delete primary key of the adventurers&amp;#39; table ALTERTABLEadventurersDROPCONSTRAINTadventurers_pkey View Table -- Retrieve all rows SELECT*FROMadventurers adventurer_idnameageraceweapon 1Fjoak Doom-Wife28HumanAxe 2Alooneric Cortte29HumanBow 3Piperel Ramsay35ElfBow 4Casimir Yardley14ElfBow</description>
    </item>
    
    <item>
      <title>Delete Rows</title>
      <link>https://chrisalbon.com/postgresql/add_delete_change/delete_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/add_delete_change/delete_rows/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Human&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;) View Table -- Retrieve all rows SELECT*FROMadventurers nameageraceweapon Fjoak Doom-Wife28HumanAxe Alooneric Cortte29HumanBow Piperel Ramsay35ElfBow Casimir Yardley14ElfBow Delete All Rows -- Delete rows DELETEFROMadventurers-- Where the race column is human WHERErace=&amp;#39;Human&amp;#39; View Table -- Retrieve all rows SELECT*FROMadventurers nameageraceweapon Piperel Ramsay35ElfBow Casimir Yardley14ElfBow</description>
    </item>
    
    <item>
      <title>Delete Rows That Don&#39;t Exist In Another Table</title>
      <link>https://chrisalbon.com/postgresql/add_delete_change/delete_rows_that_dont_exist_in_another_table/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/add_delete_change/delete_rows_that_dont_exist_in_another_table/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATETABLEelves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable alivevarchar(255)) Create Table Of Alive -- Create table called alive CREATETABLEalive(-- string variable namevarchar(255)) Insert Rows Into Elf Table INSERTINTOelves(name,age,race,alive)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;) Insert Rows Into Alive Table INSERTINTOalive(name)VALUES(&amp;#39;Keat Knigh&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;) Delete Rows In Elf Table That Don&amp;rsquo;t Exist In Alive Table -- Delete in elf table DELETEFROMelves-- Where the name in elves is not in the list of names in alive.</description>
    </item>
    
    <item>
      <title>Delete Table</title>
      <link>https://chrisalbon.com/postgresql/tables/delete_table/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/tables/delete_table/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Delete Table -- Delete table DROPTABLEadventurers </description>
    </item>
    
    <item>
      <title>Delete Table With Views</title>
      <link>https://chrisalbon.com/postgresql/tables/delete_table_with_views/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/tables/delete_table_with_views/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Human&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;) Create View -- Create view called elves containing CREATEVIEWelvesAS(-- Select all rows from adventurers table SELECT*FROMadventurers-- Where the race is elf WHERErace=&amp;#39;Elf&amp;#39;) Delete Table -- Delete table and dependent views DROPTABLEadventurersCASCADE </description>
    </item>
    
    <item>
      <title>Delete View</title>
      <link>https://chrisalbon.com/postgresql/basics/delete_view/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/delete_view/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Human&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;) Create View -- Create view called elves containing CREATEVIEWelvesAS(-- Select all rows from adventurers table SELECT*FROMadventurers-- Where the race is elf WHERErace=&amp;#39;Elf&amp;#39;) Delete View -- Delete View DROPVIEWelves </description>
    </item>
    
    <item>
      <title>Duplicate Table</title>
      <link>https://chrisalbon.com/postgresql/tables/duplicate_table/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/tables/duplicate_table/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Row -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) View Table -- Retrieve rows from table SELECT*FROMwarriors nameageraceweapon Fjoak Doom-Wife28HumanAxe Alooneric Cortte29ElfBow Piperel Ramsay35ElfSword Casimir Yardley14ElfMagic Create New Table From Query -- Create a new table called warriors that CREATETABLEwarriorsAS-- includes all rows from adventurers SELECT*FROMadventurers View New Table -- Retrieve rows from table SELECT*FROMwarriors nameageraceweapon Fjoak Doom-Wife28HumanAxe Alooneric Cortte29ElfBow Piperel Ramsay35ElfSword Casimir Yardley14ElfMagic</description>
    </item>
    
    <item>
      <title>Examine A Query</title>
      <link>https://chrisalbon.com/postgresql/basics/examine_a_query/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/examine_a_query/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Row -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) View Table -- Retrieve rows from table SELECT*FROMadventurers nameageraceweapon Fjoak Doom-Wife28HumanAxe Alooneric Cortte29ElfBow Piperel Ramsay35ElfSword Casimir Yardley14ElfMagic Examine Query Note: the lower the cost the better.
-- Examine the query: retrieve all rows from table EXPLAINSELECT*FROMadventurers QUERY PLAN Seq Scan on adventurers (cost=0.</description>
    </item>
    
    <item>
      <title>Export To CSV</title>
      <link>https://chrisalbon.com/postgresql/add_delete_change/export_to_csv/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/add_delete_change/export_to_csv/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Export To CSV Note: Relative file paths are not allowed.
-- Export the adventurers table to that file path and -- name using the comma delimiter and with column headings COPYadventurersTO&amp;#39;/Users/chrisalbon/example_file.csv&amp;#39;DELIMITER&amp;#39;,&amp;#39;CSVHEADER </description>
    </item>
    
    <item>
      <title>Extract Characters From Strings</title>
      <link>https://chrisalbon.com/postgresql/text/extract_characters_from_strings/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/text/extract_characters_from_strings/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Human&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;) Extract Characters From Strings -- Extract the first two characters from the race column values SELECTname,age,SUBSTR(race,1,2)FROMadventurers nameagesubstr Fjoak Doom-Wife28Hu Alooneric Cortte29Hu Piperel Ramsay35El Casimir Yardley14El</description>
    </item>
    
    <item>
      <title>Find Values In Both Tables</title>
      <link>https://chrisalbon.com/postgresql/merging_and_joining/find_values_in_both_tables/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/merging_and_joining/find_values_in_both_tables/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATETABLEelves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Create Table Of Dwarves -- Create table called dwarves CREATETABLEdwarves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows Into Elf Table INSERTINTOelves(name,age,race,weapon)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERTINTOdwarves(name,age,race,weapon)VALUES(&amp;#39;Kalog&amp;#39;,23,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Dranar&amp;#39;,145,&amp;#39;Dwarf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Bratar&amp;#39;,12,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Dragga&amp;#39;,23,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;) Find All Unique Values In Both Tables -- Retrieve all weapons from elves SELECTweaponFROMelves-- Find the unique values that overlap with.</description>
    </item>
    
    <item>
      <title>Find Values In One Table And Not Another</title>
      <link>https://chrisalbon.com/postgresql/merging_and_joining/find_values_in_one_table_and_not_another/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/merging_and_joining/find_values_in_one_table_and_not_another/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATETABLEelves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Create Table Of Dwarves -- Create table called dwarves CREATETABLEdwarves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows Into Elf Table INSERTINTOelves(name,age,race,weapon)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERTINTOdwarves(name,age,race,weapon)VALUES(&amp;#39;Kalog&amp;#39;,23,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Dranar&amp;#39;,145,&amp;#39;Dwarf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Bratar&amp;#39;,12,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Dragga&amp;#39;,23,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;) Find Unique Values In Elves That Aren&amp;rsquo;t In Dwarves -- Retrieve all weapons from elves SELECTweaponFROMelves-- Find the unique values that are not in.</description>
    </item>
    
    <item>
      <title>Group Rows</title>
      <link>https://chrisalbon.com/postgresql/basics/group_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/group_rows/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Human&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Group Rows -- Retrieve the race and average age from the table SELECTrace,AVG(age)FROMadventurers-- Grouped by race GROUPBYrace,weapon-- Where the weapon of the adventurer is a bow HAVINGweapon=&amp;#39;Bow&amp;#39; raceavg Elf14 Human29</description>
    </item>
    
    <item>
      <title>Group Rows With Conditions</title>
      <link>https://chrisalbon.com/postgresql/basics/group_rows_with_conditions/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/group_rows_with_conditions/</guid>
      <description>WHERE filters rows before grouping (i.e. GROUP BY) while HAVING filters rows after grouping.
Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Human&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;) Group Rows -- Retrieve the race and average age from the table SELECTrace,age,AVG(age)FROMadventurers-- Grouped by race GROUPBYraceage-- That are older than 20 HAVINGage&amp;gt;20 raceavg Elf24.</description>
    </item>
    
    <item>
      <title>If Else</title>
      <link>https://chrisalbon.com/postgresql/basics/if_else/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/if_else/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Create An If Else Statement There are a number of ways to do if-else in SQL, my prefered way is the CASE statement.
-- Retrieve all rows SELECT*,-- The case when race = elf, return &amp;#34;Elvish&amp;#34; CASEWHENrace=&amp;#39;Elf&amp;#39;THEN&amp;#39;Elvish&amp;#39;-- When race = human, return &amp;#34;Human&amp;#34; WHENrace=&amp;#39;Human&amp;#39;THEN&amp;#39;Human&amp;#39;-- Call this column &amp;#34;race&amp;#34; ENDASrace-- Do this from the adventurers table FROMadventurers nameageraceweaponrace Fjoak Doom-Wife28HumanAxeHuman Alooneric Cortte29ElfBowElvish Piperel Ramsay35ElfSwordElvish Casimir Yardley14ElfMagicElvish</description>
    </item>
    
    <item>
      <title>Import CSV</title>
      <link>https://chrisalbon.com/postgresql/add_delete_change/import_csv/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/add_delete_change/import_csv/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Export To CSV -- Export the adventurers table to that file path and -- name using the comma delimiter and with column headings COPYadventurersTO&amp;#39;/Users/chrisalbon/example_file.csv&amp;#39;DELIMITER&amp;#39;,&amp;#39;CSVHEADER Create Empty Table -- Create table called heroes CREATETABLEheroes(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Import CSV -- Import to the heros table the CSV file that uses comma delimiters and has column headers COPYheroesFROM&amp;#39;/Users/chrisalbon/example_file.</description>
    </item>
    
    <item>
      <title>Inner Join Tables</title>
      <link>https://chrisalbon.com/postgresql/merging_and_joining/inner_join/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/merging_and_joining/inner_join/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255)) Create Table Of Adventurer&amp;rsquo;s Equipment -- Create table called equipment CREATETABLEequipment(-- string variable namevarchar(255),-- string variable clothesvarchar(255),-- string variable weaponvarchar(255)) Insert Rows Into Adventurers Table INSERTINTOadventurers(name,age,race)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Dwarf&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Dwarf&amp;#39;) Insert Rows Into Equipment Table INSERTINTOequipment(name,clothes,weapon)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,&amp;#39;Leather Armor&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,&amp;#39;Robe&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,&amp;#39;Tunic&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,&amp;#39;Chainmail&amp;#39;,&amp;#39;Axe&amp;#39;) Inner Join Tables -- Return the name of people from the adventurers table, age, race, clothes, and weapon SELECTadventurers.</description>
    </item>
    
    <item>
      <title>Insert Rows</title>
      <link>https://chrisalbon.com/postgresql/add_delete_change/insert_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/add_delete_change/insert_rows/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Row -- Insert row into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;) Retrieve Rows -- Retrieve all rows from table SELECT*FROMadventurers nameageraceweapon Fjoak Doom-Wife28HumanAxe Insert Rows -- Insert rows into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Retrieve Rows -- Retrieve all rows from table SELECT*FROMadventurers nameageraceweapon Fjoak Doom-Wife28HumanAxe Alooneric Cortte29ElfBow Piperel Ramsay35ElfSword Casimir Yardley14ElfMagic</description>
    </item>
    
    <item>
      <title>Join Multiple Table</title>
      <link>https://chrisalbon.com/postgresql/merging_and_joining/join_multiple_tables/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/merging_and_joining/join_multiple_tables/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATETABLEelves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255)) Create Table Of Weapons -- Create table called weapons CREATETABLEweapons(-- string variable namevarchar(255),-- string variable weaponvarchar(255),-- integer variable weightint) Create Table Of Armor -- Create table called armor CREATETABLEarmor(-- string variable namevarchar(255),-- string variable bodyvarchar(255),-- string variable helmvarchar(255)) Insert Rows Into Elf Table INSERTINTOelves(name,age,race)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Elf&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Elf&amp;#39;) Insert Rows Into Weapon Table INSERTINTOweapons(name,weapon,weight)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,&amp;#39;Axe&amp;#39;,2),(&amp;#39;Cordin Garner&amp;#39;,&amp;#39;Halberd&amp;#39;,3),(&amp;#39;Keat Knigh&amp;#39;,&amp;#39;Dagger&amp;#39;,4),(&amp;#39;Colbat Nalor&amp;#39;,&amp;#39;Dagger&amp;#39;,5) Insert Rows Into Armor Table INSERTINTOarmor(name,body,helm)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,&amp;#39;Leather&amp;#39;,&amp;#39;Leather&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,&amp;#39;Leather&amp;#39;,NULL),(&amp;#39;Keat Knigh&amp;#39;,&amp;#39;Plate&amp;#39;,&amp;#39;Plate&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,&amp;#39;Plate&amp;#39;,&amp;#39;Plate&amp;#39;) Join All Tables -- All rows from table SELECTelves.</description>
    </item>
    
    <item>
      <title>Left Join Tables</title>
      <link>https://chrisalbon.com/postgresql/merging_and_joining/left_join/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/merging_and_joining/left_join/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255)) Create Table Of Adventurer&amp;rsquo;s Equipment -- Create table called equipment CREATETABLEequipment(-- string variable namevarchar(255),-- string variable clothesvarchar(255),-- string variable weaponvarchar(255)) Insert Rows Into Adventurers Table INSERTINTOadventurers(name,age,race)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Dwarf&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Dwarf&amp;#39;) Insert Rows Into Equipment Table INSERTINTOequipment(name,clothes,weapon)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,&amp;#39;Leather Armor&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,&amp;#39;Robe&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Tasar Keynelis&amp;#39;,&amp;#39;Tunic&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Sataleeti Iarroris&amp;#39;,&amp;#39;Chainmail&amp;#39;,&amp;#39;Axe&amp;#39;) Left Join Tables -- Return the name of people from the adventurers table, age, race, clothes, and weapon SELECTadventurers.</description>
    </item>
    
    <item>
      <title>List Columns In Table</title>
      <link>https://chrisalbon.com/postgresql/tables/list_columns_in_table/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/tables/list_columns_in_table/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATETABLEelves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable alivevarchar(255)) Insert Rows Into Elf Table INSERTINTOelves(name,age,race,alive)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;) View Columns Rows In Elf Table -- Get name, data ype and column position SELECTcolumn_name,data_type,ordinal_position-- From the column&amp;#39;s metadata FROMinformation_schema.columns-- Where the table name is elves WHEREtable_name=&amp;#39;elves&amp;#39; column_namedata_typeordinal_position namecharacter varying1 ageinteger2 racecharacter varying3 alivecharacter varying4</description>
    </item>
    
    <item>
      <title>List Index Columns</title>
      <link>https://chrisalbon.com/postgresql/basics/list_indexed_columns/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/list_indexed_columns/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATETABLEelves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable alivevarchar(255)) Insert Rows Into Elf Table INSERTINTOelves(name,age,race,alive)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;) Create Index -- Index the names column in the elves table CREATEINDEXONelves(name) View All Indexes In Database SELECTindexes.tablename,indexes.indexname,columns.column_nameFROMpg_catalog.pg_indexesindexes,information_schema.columnscolumnsWHEREindexes.schemaname=&amp;#39;public&amp;#39;ANDindexes.tablename=columns.table_name tablenameindexnamecolumn_name elveselves_name_idxname elveselves_name_idxage elveselves_name_idxrace elveselves_name_idxalive</description>
    </item>
    
    <item>
      <title>List Tables In Database</title>
      <link>https://chrisalbon.com/postgresql/basics/list_tables_in_database/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/list_tables_in_database/</guid>
      <description>Create Table -- Create table called villains CREATETABLEvillains(-- string variable namevarchar(255)) Create Table -- Create table called heroes CREATETABLEheroes(-- string variable namevarchar(255)) Create Table -- Create table called battles CREATETABLEbattles(-- string variable namevarchar(255)) List Tables In Database SELECTtable_nameFROMinformation_schema.tablesWHEREtable_schema=&amp;#39;public&amp;#39;ANDtable_type=&amp;#39;BASE TABLE&amp;#39; table_name battles heroes villians</description>
    </item>
    
    <item>
      <title>Lower And Upper Case</title>
      <link>https://chrisalbon.com/postgresql/text/lower_case_and_upper_case/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/text/lower_case_and_upper_case/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Human&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;) Upper Case String Values -- Upper case the values in the race column SELECTUPPER(race)FROMadventurers upper HUMAN HUMAN ELF ELF Lower Case String Values -- Lower case the values in the race column SELECTlower(race)FROMadventurers lower human human elf elf </description>
    </item>
    
    <item>
      <title>Mathematical Operations On Columns</title>
      <link>https://chrisalbon.com/postgresql/numeric/mathematical_operations_on_column/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/numeric/mathematical_operations_on_column/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;) Apply Addition To Column -- Apply operation UPDATEadventurersSETage=age+10 View Table -- Retrieve data SELECT*FROMadventurers nameagerace Fjoak Doom-Wife38Human Alooneric Cortte39Elf Piperel Ramsay45Elf Casimir Yardley24Elf Apply Substraction To Column -- Apply operation UPDATEadventurersSETage=age-10 View Table -- Retrieve data SELECT*FROMadventurers nameagerace Fjoak Doom-Wife28Human Alooneric Cortte29Elf Piperel Ramsay35Elf Casimir Yardley14Elf Apply Multiplication To Column -- Apply operation UPDATEadventurersSETage=age*10 View Table -- Retrieve data SELECT*FROMadventurers nameagerace Fjoak Doom-Wife280Human Alooneric Cortte290Elf Piperel Ramsay350Elf Casimir Yardley140Elf Apply Division To Column -- Apply operation UPDATEadventurersSETage=age/10 View Table -- Retrieve data SELECT*FROMadventurers nameagerace Fjoak Doom-Wife28Human Alooneric Cortte29Elf Piperel Ramsay35Elf Casimir Yardley14Elf Apply Modulo To Column -- Apply operation UPDATEadventurersSETage=age%10 View Table -- Retrieve data SELECT*FROMadventurers nameagerace Fjoak Doom-Wife8Human Alooneric Cortte9Elf Piperel Ramsay5Elf Casimir Yardley4Elf </description>
    </item>
    
    <item>
      <title>Outer Join Tables</title>
      <link>https://chrisalbon.com/postgresql/merging_and_joining/outer_join/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/merging_and_joining/outer_join/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255)) Create Table Of Adventurer&amp;rsquo;s Equipment -- Create table called equipment CREATETABLEequipment(-- string variable namevarchar(255),-- string variable clothesvarchar(255),-- string variable weaponvarchar(255)) Insert Rows Into Adventurers Table INSERTINTOadventurers(name,age,race)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Dwarf&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Dwarf&amp;#39;) Insert Rows Into Equipment Table INSERTINTOequipment(name,clothes,weapon)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,&amp;#39;Leather Armor&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,&amp;#39;Robe&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Tasar Keynelis&amp;#39;,&amp;#39;Tunic&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Sataleeti Iarroris&amp;#39;,&amp;#39;Chainmail&amp;#39;,&amp;#39;Axe&amp;#39;) Outer Join Tables -- Return the name of people from the adventurers table, age, race, clothes, and weapon SELECTadventurers.</description>
    </item>
    
    <item>
      <title>Partial String Match</title>
      <link>https://chrisalbon.com/postgresql/text/partial_string_match/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/text/partial_string_match/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Retrieve Rows %o% indicates we are matching any string that contains an o. If we wanted to only match strings that beging with Alo we would use Alo%
-- Retrieve all rows from table SELECT*FROMadventurers-- Where the value of weapon contains an &amp;#39;o&amp;#39; WHEREweaponLIKE&amp;#39;%o%&amp;#39; nameageraceweapon Alooneric Cortte29ElfBow Piperel Ramsay35ElfSword</description>
    </item>
    
    <item>
      <title>Rename Columns In Views</title>
      <link>https://chrisalbon.com/postgresql/basics/rename_columns_in_views/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/rename_columns_in_views/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Human&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;) Create View -- Create view called elves containing with the column&amp;#39;s renamed: -- elven_name, elven_age, race, and elven_weapon CREATEVIEWelves(elven_name,elven_age,race,elven_weapon)AS(-- Select all rows from adventurers table SELECT*FROMadventurers-- Where the race is elf WHERErace=&amp;#39;Elf&amp;#39;) Retrieve View -- Retrieve all rows from the view Elf SELECT*FROMelves elven_nameelven_ageraceelven_weapon Piperel Ramsay35ElfBow Casimir Yardley14ElfBow</description>
    </item>
    
    <item>
      <title>Replace Missing Values</title>
      <link>https://chrisalbon.com/postgresql/basics/replace_missing_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/replace_missing_values/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows With Missing Values -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,NULL),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,NULL) Retrieve Missing Values In SQL, missing values are denoted as NULL.
-- Return values where value is the weapon if not missing, but &amp;#34;Unknown&amp;#34; if missing SELECTname,COALESCE(weapon,&amp;#39;Unknown&amp;#39;)FROMadventurers namecoalesce Fjoak Doom-WifeAxe Alooneric CortteBow Piperel RamsayUnknown Casimir YardleyUnknown</description>
    </item>
    
    <item>
      <title>Retrieve Only A Few Rows</title>
      <link>https://chrisalbon.com/postgresql/basics/retrieve_only_a_few_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/retrieve_only_a_few_rows/</guid>
      <description>Note: This code works in PostgreSQL databases, but might not work in other SQL database systems (e.g. MySQL).
Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Retrieve Only Two Rows -- Retrieve rows from table SELECT*FROMadventurers-- Limited to two rows LIMIT2 nameageraceweapon Fjoak Doom-Wife28HumanAxe Alooneric Cortte29ElfBow</description>
    </item>
    
    <item>
      <title>Retrieve Random Subset Of Rows</title>
      <link>https://chrisalbon.com/postgresql/basics/retrieve_random_subset_of_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/retrieve_random_subset_of_rows/</guid>
      <description>Note: This code works in PostgreSQL databases, but might not work in other SQL database systems (e.g. MySQL).
Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Retrieve Only Two Rows -- Retrieve rows from table SELECT*FROMadventurers-- Shuffle randomly ORDERBYRANDOM()-- Retrieve two rows LIMIT2 nameageraceweapon Alooneric Cortte29ElfBow Piperel Ramsay35ElfSword</description>
    </item>
    
    <item>
      <title>Retrieve Row</title>
      <link>https://chrisalbon.com/postgresql/basics/retrieve_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/retrieve_rows/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Retrieve Rows -- Retrieve all rows from table SELECT*FROMadventurers nameageraceweapon Fjoak Doom-Wife28HumanAxe Alooneric Cortte29ElfBow Piperel Ramsay35ElfSword Casimir Yardley14ElfMagic</description>
    </item>
    
    <item>
      <title>Retrieve Rows Based On Condition</title>
      <link>https://chrisalbon.com/postgresql/basics/retrieve_rows_based_on_condition/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/retrieve_rows_based_on_condition/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Retrieve Rows Of Elves -- Retrieve all rows from table SELECT*FROMadventurers-- Where the race is Elf WHERErace=&amp;#39;Elf&amp;#39; nameageraceweapon Alooneric Cortte29ElfBow Piperel Ramsay35ElfSword Casimir Yardley14ElfMagic Retrieve Rows Of Non-Elves -- Retrieve all rows from table SELECT*FROMadventurers-- Where the race is not Elf WHERErace&amp;lt;&amp;gt;&amp;#39;Elf&amp;#39; nameageraceweapon Fjoak Doom-Wife28HumanAxe Retrieve Rows Where Age Is Over 30 -- Retrieve all rows from table SELECT*FROMadventurers-- Where the age is over 30 WHEREage&amp;gt;30 nameageraceweapon Piperel Ramsay35ElfSword Retrieve Rows Where Age Is Greater Than Or Equal To 20 -- Retrieve all rows from table SELECT*FROMadventurers-- Where the age is greater than or equal to 20 WHEREage&amp;gt;=20 nameageraceweapon Fjoak Doom-Wife28HumanAxe Alooneric Cortte29ElfBow Piperel Ramsay35ElfSword</description>
    </item>
    
    <item>
      <title>Retrieve Rows Based On Multiple Condition</title>
      <link>https://chrisalbon.com/postgresql/basics/retrieve_rows_based_on_multiple_conditions/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/retrieve_rows_based_on_multiple_conditions/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Retrieve Rows Of Elven Swords Wielders -- Retrieve all rows from table SELECT*FROMadventurers-- Where the race is Elf WHERErace=&amp;#39;Elf&amp;#39;-- weapon is sword ANDweapon=&amp;#39;Sword&amp;#39; nameageraceweapon Piperel Ramsay35ElfSword</description>
    </item>
    
    <item>
      <title>Retrieve Subset Of Columns</title>
      <link>https://chrisalbon.com/postgresql/basics/retrieve_subset_columns/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/retrieve_subset_columns/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Retrieve Two Columns -- Retrieve name and age columns SELECTname,ageFROMadventurers nameage Fjoak Doom-Wife28 Alooneric Cortte29 Piperel Ramsay35 Casimir Yardley14</description>
    </item>
    
    <item>
      <title>Retrieving Missing Values</title>
      <link>https://chrisalbon.com/postgresql/basics/retrieving_missing_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/retrieving_missing_values/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows With Missing Values -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,NULL),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,NULL) Retrieve Missing Values In SQL, missing values are denoted as NULL.
-- Retrieve all rows from table SELECT*FROMadventurers-- Where the weapon is unknown WHEREweaponisNULL nameageraceweapon Piperel Ramsay35ElfNULL Casimir Yardley14ElfNULL</description>
    </item>
    
    <item>
      <title>Right Join Tables</title>
      <link>https://chrisalbon.com/postgresql/merging_and_joining/right_join/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/merging_and_joining/right_join/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255)) Create Table Of Adventurer&amp;rsquo;s Equipment -- Create table called equipment CREATETABLEequipment(-- string variable namevarchar(255),-- string variable clothesvarchar(255),-- string variable weaponvarchar(255)) Insert Rows Into Adventurers Table INSERTINTOadventurers(name,age,race)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Dwarf&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Dwarf&amp;#39;) Insert Rows Into Equipment Table INSERTINTOequipment(name,clothes,weapon)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,&amp;#39;Leather Armor&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,&amp;#39;Robe&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Tasar Keynelis&amp;#39;,&amp;#39;Tunic&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Sataleeti Iarroris&amp;#39;,&amp;#39;Chainmail&amp;#39;,&amp;#39;Axe&amp;#39;) Right Join Tables -- Return the name of people from the adventurers table, age, race, clothes, and weapon SELECTadventurers.</description>
    </item>
    
    <item>
      <title>Save Queries As Variables</title>
      <link>https://chrisalbon.com/postgresql/basics/save_queries_as_variables/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/save_queries_as_variables/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Create Two Subqueries, Save As Variables, Use In Another Query Note that there are better ways to run this particular query. The code below is used as a simple example of how we can create variables out of subqueries and use them.</description>
    </item>
    
    <item>
      <title>Select Highest Value In Each Group</title>
      <link>https://chrisalbon.com/postgresql/basics/select_highest_value_in_each_group/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/select_highest_value_in_each_group/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Human&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;) Select The Oldest Adventurer In Each Race -- Get the name, race, age of the first row in each group, -- when grouped by race SELECTDISTINCTON(race)name,race,ageFROMadventurers-- Order by race, then age, in descending order -- (so the oldest person is the top of each group) ORDERBYrace,ageDESC nameraceage Piperel RamsayElf35 Alooneric CortteHuman29</description>
    </item>
    
    <item>
      <title>Select Values Between Two Values</title>
      <link>https://chrisalbon.com/postgresql/basics/select_values_between_two_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/select_values_between_two_values/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Human&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;) Get Values Between Two Values, Method 1 -- Get all rows from adventurers SELECT*FROMadventurers-- Where age is between 20 and 30 WHEREageBETWEEN20AND30 nameagerace Fjoak Doom-Wife28Human Alooneric Cortte29Human Get Values Between Two Values, Method 2 -- Get all rows from adventurers SELECT*FROMadventurers-- Where age is between 20 and 30 WHEREage&amp;gt;=20ANDage&amp;lt;=30 nameagerace Fjoak Doom-Wife28Human Alooneric Cortte29Human</description>
    </item>
    
    <item>
      <title>Self Join Table</title>
      <link>https://chrisalbon.com/postgresql/merging_and_joining/self_join/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/merging_and_joining/self_join/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable child_ofvarchar(255)) Insert Rows Into Adventurers Table INSERTINTOadventurers(name,age,child_of)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,NULL),(&amp;#39;Cordin Garner&amp;#39;,29,NULL),(&amp;#39;Keat Garner&amp;#39;,24,&amp;#39;Cordin Garner&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,NULL) Inner Join Tables -- Select name of copy1 and name of copy2 (renamed &amp;#34;parent&amp;#34;) SELECTcopy1.name,copy2.nameasparent-- Where copy1 and copy2 are identical copies of the adventurers table FROMadventurerscopy1,adventurerscopy2-- Merge copy1 and copy2 where the name of copy1 matches the name of child_of field in copy2 WHEREcopy1.</description>
    </item>
    
    <item>
      <title>Show Column Information</title>
      <link>https://chrisalbon.com/postgresql/tables/show_column_information/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/tables/show_column_information/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Show Column Information -- Select column name, data type, and max character limit SELECTcolumn_name,data_type,character_maximum_length-- From the database&amp;#39;s schema FROMINFORMATION_SCHEMA.COLUMNS-- For the table adventurers WHEREtable_name=&amp;#39;adventurers&amp;#39; column_namedata_typecharacter_maximum_length namecharacter varying255 ageintegerNULL racecharacter varying255 weaponcharacter varying255</description>
    </item>
    
    <item>
      <title>Sort By Natural Ordering</title>
      <link>https://chrisalbon.com/postgresql/interview_questions/sort_column_natural_ordering/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/interview_questions/sort_column_natural_ordering/</guid>
      <description>Question You are given a column of strings, sort them in natural order.
Answer Natural ordering is simply the ordering that a human would expect.
Create Table CREATETABLEdocuments(-- string variable namevarchar(255)) Insert Values Into Table -- Insert into the table documents INSERTINTOdocuments(name)-- a list of files (notice the numbering) VALUES(&amp;#39;file1.txt&amp;#39;),(&amp;#39;file2.txt&amp;#39;),(&amp;#39;file3.txt&amp;#39;),(&amp;#39;file4.txt&amp;#39;),(&amp;#39;file5.txt&amp;#39;),(&amp;#39;file6.txt&amp;#39;),(&amp;#39;file7.txt&amp;#39;),(&amp;#39;file8.txt&amp;#39;),(&amp;#39;file9.txt&amp;#39;),(&amp;#39;file10.txt&amp;#39;),(&amp;#39;file11.txt&amp;#39;),(&amp;#39;file12.txt&amp;#39;),(&amp;#39;file13.txt&amp;#39;),(&amp;#39;file14.txt&amp;#39;),(&amp;#39;file15.txt&amp;#39;) View Table -- View all the rows SELECT*FROMdocuments  name file1.txt file2.txt file3.txt file4.txt file5.txt file6.txt file7.txt file8.txt file9.txt file10.txt file11.</description>
    </item>
    
    <item>
      <title>Sort Rows</title>
      <link>https://chrisalbon.com/postgresql/basics/sort_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/sort_rows/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Sort Rows By One Column -- Retrieve rows SELECT*FROMadventurers-- Order rows by age in ascending order ORDERBYageASC nameageraceweapon Casimir Yardley14ElfMagic Fjoak Doom-Wife28HumanAxe Alooneric Cortte29ElfBow Piperel Ramsay35ElfSword Sort Rows By Two Columns Note that ascending order (ASC) in strings means alphabetical.</description>
    </item>
    
    <item>
      <title>Sort Rows In Groups</title>
      <link>https://chrisalbon.com/postgresql/basics/sort_rows_in_groups/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/sort_rows_in_groups/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Sort Rows By One Column -- Retrieve rows SELECT*FROMadventurers-- Order rows by age in ascending order ORDERBYageASC nameageraceweapon Casimir Yardley14ElfMagic Fjoak Doom-Wife28HumanAxe Alooneric Cortte29ElfBow Piperel Ramsay35ElfSword Sort Rows By Two Columns -- Retrieve rows SELECT*FROMadventurers-- Order rows, when race is elf, sort by name ORDERBYCASEWHENrace=&amp;#39;Elf&amp;#39;THENname-- Otherwise sort by weapon ELSEweaponEND nameageraceweapon Alooneric Cortte29ElfBow Fjoak Doom-Wife28HumanAxe Casimir Yardley14ElfMagic Piperel Ramsay35ElfSword</description>
    </item>
    
    <item>
      <title>Stack Tables</title>
      <link>https://chrisalbon.com/postgresql/merging_and_joining/stack_tables/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/merging_and_joining/stack_tables/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATETABLEelves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Create Table Of Dwarves -- Create table called dwarves CREATETABLEdwarves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows Into Elf Table INSERTINTOelves(name,age,race,weapon)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERTINTOdwarves(name,age,race,weapon)VALUES(&amp;#39;Kalog&amp;#39;,23,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Dranar&amp;#39;,145,&amp;#39;Dwarf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Bratar&amp;#39;,12,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Dragga&amp;#39;,23,&amp;#39;Dwarf&amp;#39;,&amp;#39;Axe&amp;#39;) Stack Tables On Top Of Eachother -- All rows from elf table SELECT*FROMelves-- Stack on top of.</description>
    </item>
    
    <item>
      <title>Test If Rows Exist In Subquery</title>
      <link>https://chrisalbon.com/postgresql/basics/test_if_rows_exist_in_subquery/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/test_if_rows_exist_in_subquery/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Test If Rows Exist In Subquery -- Retrieve all the rows in adventurers SELECT*FROMadventurers-- Where rows exist in WHEREEXISTS-- A subquery that will (-- Select all the names in adventurers SELECTnameFROMadventurers-- Where race is elf WHERErace=&amp;#39;Elf&amp;#39;) nameagerace Fjoak Doom-Wife28Human Alooneric Cortte29Elf Piperel Ramsay35Elf Casimir Yardley14Elf Test If Rows Do Not Exist In Subquery -- Retrieve all the rows in adventurers SELECT*FROMadventurers-- Where the name of the adventurer is in WHERENOTEXISTS-- A subquery that will (-- Select all the names in adventurers SELECTnameFROMadventurers-- Where race is dwarf WHERErace=&amp;#39;Dwarf&amp;#39;) nameagerace Fjoak Doom-Wife28Human Alooneric Cortte29Elf Piperel Ramsay35Elf Casimir Yardley14Elf</description>
    </item>
    
    <item>
      <title>Update Rows Based On Another Table</title>
      <link>https://chrisalbon.com/postgresql/add_delete_change/update_rows_based_on_another_table/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/add_delete_change/update_rows_based_on_another_table/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATETABLEelves(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable alivevarchar(255)) Create Table Of Deaths -- Create table called deaths CREATETABLEdeaths(-- string variable namevarchar(255)) Insert Rows Into Elf Table INSERTINTOelves(name,age,race,alive)VALUES(&amp;#39;Dallar Woodfoot&amp;#39;,25,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Cordin Garner&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Keat Knigh&amp;#39;,24,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;,124,&amp;#39;Elf&amp;#39;,&amp;#39;Yes&amp;#39;) Insert Rows Into Deaths Table INSERTINTOdeaths(name)VALUES(&amp;#39;Keat Knigh&amp;#39;),(&amp;#39;Colbat Nalor&amp;#39;) View Elves Table -- Retrieve all rows from the view Elf SELECT*FROMelves nameageracealive Dallar Woodfoot25ElfYes Cordin Garner29ElfYes Keat Knigh24ElfYes Colbat Nalor124ElfYes Update Rows Based On Another Table -- Change the value in elves UPDATEelves-- to set alive to &amp;#34;No&amp;#34; SETalive=&amp;#39;No&amp;#39;-- Where the name of the elf is in the list of deaths WHEREelves.</description>
    </item>
    
    <item>
      <title>Use Column Aliases With Where Clause</title>
      <link>https://chrisalbon.com/postgresql/basics/use_column_aliases_with_where_clause/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/use_column_aliases_with_where_clause/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Retrieve Two Columns The trick is to wrap the column aliasing in paratheses.
-- Retrieve rows from SELECT*FROM-- Create alias for columns (-- Retrieve name and weapon column, renamed full_name and primary_weapon SELECTnameasfull_name,weaponasprimary_weaponFROMadventurers)-- with the alias called biological_data ASbiological_data-- Where the values in the alias column is &amp;#39;Axe&amp;#39; WHEREprimary_weapon=&amp;#39;Axe&amp;#39; full_nameprimary_weapon Fjoak Doom-WifeAxe</description>
    </item>
    
    <item>
      <title>Value Matches Element Of A List</title>
      <link>https://chrisalbon.com/postgresql/basics/retrieve_rows_where_value_matches_element_of_list/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/retrieve_rows_where_value_matches_element_of_list/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) Retrieve Rows -- Retrieve all rows from table SELECT*FROMadventurers-- Where the value of weapon is in a list of weapons WHEREweaponIN(&amp;#39;Polearm&amp;#39;,&amp;#39;Whip&amp;#39;,&amp;#39;Staff&amp;#39;,&amp;#39;Dagger&amp;#39;,&amp;#39;Bow&amp;#39;) nameageraceweapon Alooneric Cortte29ElfBow</description>
    </item>
    
    <item>
      <title>View Size Of Table</title>
      <link>https://chrisalbon.com/postgresql/tables/view_size_of_table/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/tables/view_size_of_table/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Row -- Insert row into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) View Size Of Table Note: This is method only with in PostgreSQL databases
SELECTpg_size_pretty(pg_total_relation_size(&amp;#39;adventurers&amp;#39;)) pg_size_pretty 16 kB</description>
    </item>
    
    <item>
      <title>View Unique Values</title>
      <link>https://chrisalbon.com/postgresql/basics/view_unique_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/basics/view_unique_values/</guid>
      <description>Create Table -- Create table called adventurers CREATETABLEadventurers(-- string variable namevarchar(255),-- integer variable ageint,-- string variable racevarchar(255),-- string variable weaponvarchar(255)) Insert Rows -- Insert into the table adventurers INSERTINTOadventurers(name,age,race,weapon)VALUES(&amp;#39;Fjoak Doom-Wife&amp;#39;,28,&amp;#39;Human&amp;#39;,&amp;#39;Axe&amp;#39;),(&amp;#39;Alooneric Cortte&amp;#39;,29,&amp;#39;Elf&amp;#39;,&amp;#39;Bow&amp;#39;),(&amp;#39;Piperel Ramsay&amp;#39;,35,&amp;#39;Elf&amp;#39;,&amp;#39;Sword&amp;#39;),(&amp;#39;Casimir Yardley&amp;#39;,14,&amp;#39;Elf&amp;#39;,&amp;#39;Magic&amp;#39;) View Unique Values In Race -- View unique values in the race column SELECTDISTINCTraceFROMadventurers race Elf Human</description>
    </item>
    
    <item>
      <title>What Happens When You Add NULL And Integer</title>
      <link>https://chrisalbon.com/postgresql/interview_questions/what_happens_when_you_add_null_and_integer/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/postgresql/interview_questions/what_happens_when_you_add_null_and_integer/</guid>
      <description>Question What happens when you add a NULL value and an integer?
Answer You get an error.
-- Drop table if exists DROPTABLEIFEXISTSnames;-- Create table called names CREATETABLEnames(-- string variable namevarchar(255),-- integer variable scoreint) -- Insert into the table INSERTINTOnames(name,score)-- two rows VALUES(NULL,1),(&amp;#39;Tommy&amp;#39;,1) -- Add a column with a NULL value and a integer SELECTname+scoreasresultsFROMnames [42883] ERROR: operator does not exist: character varying + integer Hint: No operator matches the given name and argument type(s).</description>
    </item>
    
  </channel>
</rss>